Use Batchdd.pkg
Use seq_chnl.pkg
Use cApplication.pkg
Use ShellExecute.pkg

Define AUTOASSIGN           for   0

// action flags
Define afNone               for   0
Define afCreate             for   1
Define afDelete             for   2
Define afRename             for   4
Define afResize             for   8
Define afChangeType         for  16
Define afChangeRelate       for  32
Define afChangeNativeType   for  64
Define afMove               for 128

Use tdDbTable.pkg
Use cColumnDef.pkg
Use cIndexDef.pkg
Use cTableDef.pkg

Class cDatabaseTablesManager is a BusinessProcess
    
    Procedure Construct_Object
        Forward Send Construct_Object

        Set Status_Log_Id      to Self
        Set Status_Log_State   to True
        Set Status_Panel_State to False
        
        { Category = "Behaviour" }
        Property String psStatusLogFile "database.log"
        
        { Visibility = Private }
        Property Integer piStatusLogCh
        { Visibility = Private }
        Property Handle[] phaTables
        { Visibility = Private }
        Property tdDbTable[] paCurrentTableList  
        { DesignTime = False }
        Property tdIndexDef[] paIndexes 
    End_Procedure
    
    Procedure End_Construct_Object
        String sFile sPath
        
        Get psStatusLogFile to sFile
        If (sFile="") Begin
            Move "database.log" to sFile
        End
        If (not(IsFileNameQualified(sFile))) Begin
            Get psDataPath of (phoWorkspace(ghoApplication)) to sPath     
            If (Right(sPath,1)<>SysConf(SYSCONF_DIR_SEPARATOR)) Begin
                Move (sPath+SysConf(SYSCONF_DIR_SEPARATOR)) to sPath
            End
            Set psStatusLogFile to (sPath+sFile)
        End
        Forward Send End_Construct_Object
    End_Procedure
    
    Function CurrentTableDef Integer iTable Returns tdDbTable
        tdDbTable[] aCurrentTableList 
        tdDbTable   tTable
        Integer iIndex
        
        Get paCurrentTableList to aCurrentTableList
        Move iTable to tTable.iFileNo
        Move (SearchArray(tTable,aCurrentTableList)) to iIndex   
        If (iIndex>-1) Begin
            Move aCurrentTableList[iIndex] to tTable
        End
        Function_Return tTable
    End_Function
      
    { Visibility = Public }
    Procedure RegisterTableObject Handle hoTable
        Handle[] aTables
        Integer  eError
        
        Get ValidateColumns of hoTable to eError
        Case Begin
            Case (eError=eErrColumnNames)
                Error DFERR_OPERATION_NOT_ALLOWED "Column names must be unique. You may not even re-use a name that any column has been previously known by."    
                Case Break
            Case (eError=eErrIdentityColumnCount)
                Error DFERR_OPERATION_NOT_ALLOWED "Only one identity column can be set per table."
                Case Break
            Case (eError=eErrIdentityColumnDataType)
                Error DFERR_OPERATION_NOT_ALLOWED "Incorret Data Type for identity column use."
                Case Break
            Case (eError=eErrIdentityColumnDriver)
                Error DFERR_OPERATION_NOT_ALLOWED "DataFlex tables do not support identity columns."
                Case Break  
            Case Else
                Get phaTables to aTables
                Move hoTable to aTables[-1]
                Set phaTables to aTables 
        Case End
    End_Procedure

    { Visibility = Private }
    Function TimeStamp DateTime dtValue Returns String
        String   sHr sMin sSec
        DateTime dtVar 
        
        If (num_arguments=1) Begin
            Move dtValue to dtVar   
        End
        Else Begin
            Move (CurrentDateTime()) to dtVar
        End
        Move ('00'-(String(DateGetHour  (dtVar)))) to sHr
        Move ('00'-(String(DateGetMinute(dtVar)))) to sMin
        Move ('00'-(String(DateGetSecond(dtVar)))) to sSec
        Move (Right(sHr,2))  to sHr
        Move (Right(sMin,2)) to sMin
        Move (Right(sSec,2)) to sSec
        Function_Return (SFormat('%1:%2:%3',sHr,sMin,sSec))
    End_Function
    
    { Visibility = Private }
    Procedure DateAndTime Date ByRef dDate String ByRef sTime
        DateTime dtVar
        
        Move (CurrentDateTime()) to dtVar
        Get TimeStamp dtVar to sTime
        Move (Date(dtVar)) to dDate
    End_Procedure
    
    { Visibility = Private }
    Function DescriptiveDate Date dValue Returns String
        Date    dDate
        Integer iMonth iYear
        String  sDesc sDay
        String[] aMonths
        
        If (num_arguments=1) Begin
            Move dValue to dDate
        End
        Else Begin
            Move (CurrentDateTime()) to dDate
        End
        Move C_$January   to aMonths[ 1]
        Move C_$February  to aMonths[ 2]
        Move C_$March     to aMonths[ 3]
        Move C_$April     to aMonths[ 4]
        Move C_$May       to aMonths[ 5]
        Move C_$June      to aMonths[ 6]
        Move C_$July      to aMonths[ 7]
        Move C_$August    to aMonths[ 8]
        Move C_$September to aMonths[ 9]
        Move C_$October   to aMonths[10]
        Move C_$November  to aMonths[11]
        Move C_$December  to aMonths[12]
        Move (DateGetMonth(dDate)) to iMonth
        Move (DateGetDay(dDate))   to sDay
        Move (DateGetYear(dDate))  to iYear
        Case Begin
            Case (Right(sDay,1)='1' and sDay<>'11')
                Move (sDay-'st') to sDay
                Case Break
            Case (Right(sDay,1)='2' and sDay<>'12')
                Move (sDay-'nd') to sDay
                Case Break
            Case (Right(sDay,1)='3' and sDay<>'13')
                Move (sDay-'rd') to sDay   
                Case Break
            Case Else
                Move (sDay-'th') to sDay
        Case End 
        Move (sDay*aMonths[iMonth]*String(iYear)) to sDesc
        Function_Return sDesc
    End_Function

    Procedure Log_Status String sMsg
        Integer iCh
        Get piStatusLogCh to iCh
        Writeln channel iCh sMsg
    End_Procedure
    
    { Visibility = Private }
    Procedure Start_Log
        Integer iCh iMajor iMinor iRelease iBuild
        String  sFile sTime sDate
        Handle  hoVersionInfo
        Boolean bIncluded
        
        Get psStatusLogFile to sFile
        Move (Seq_New_Channel()) to iCh
        Set piStatusLogCh to iCh
        Direct_Output channel iCh sFile
        
        Get TimeStamp to sTime
        Get DescriptiveDate to sDate
        Get phoVersionInfo of ghoApplication to hoVersionInfo
        If (hoVersionInfo>0) Begin
            Get pbIncluded of hoVersionInfo to bIncluded
            If (bIncluded) Begin
                Get piVersionMajor   of hoVersionInfo to iMajor
                Get piVersionMinor   of hoVersionInfo to iMinor
                Get piVersionRelease of hoVersionInfo to iRelease
                Get piVersionBuild   of hoVersionInfo to iBuild
            End
        End
        Send Log_Status (SFormat('Database Version %1.%2.%3.%4',iMajor,iMinor,iRelease,iBuild))
        Send Log_Status sDate
        Send Log_Status ('Process started at'*sTime)
    End_Procedure

    { Visibility = Private }
    Procedure End_Log
        String  sTimeStamp 
        Integer iErrors iCh
        Boolean bIncluded
        
        Get TimeStamp to sTimeStamp
        Send Log_Status ('Process completed at'*sTimeStamp)
        Get Error_Count to iErrors
        Send Log_Status ('Number of errors encountered:'*String(iErrors))
        Get piStatusLogCh to iCh
        Close_Output channel iCh
        Send Seq_Release_Channel iCh
    End_Procedure 
    
    Procedure EstablishCurrentTableList
        Handle  hTable
        Integer iTable iIndex iCol iCols iMaxIndex iSegments iSegment iCase iDirection iPrime
        Boolean bOpen
        String  sDriver sCol
        tdDbTable[] aTables

        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable>0) Begin
                Move (SizeOfArray(aTables)) to iTable
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to aTables[iTable].sName
                Set DetailStatus to aTables[iTable].sName
                Move hTable to aTables[iTable].iFileNo
                Get_Attribute DF_FILE_OPENED of hTable to bOpen
                If (not(bOpen)) Begin
                    Open hTable
                End
                Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iCols
                Move (ResizeArray(aTables[iTable].aColumns,iCols+1)) to aTables[iTable].aColumns
                For iCol from 1 to iCols
                    Get_Attribute DF_FIELD_NAME of hTable iCol to aTables[iTable].aColumns[iCol].sCol
                    // uppercase this - it aids with searching later...
                    Move (Uppercase(aTables[iTable].aColumns[iCol].sCol)) ;
                                                                        to aTables[iTable].aColumns[iCol].sCol
                    Get_Attribute DF_FIELD_NUMBER        of hTable iCol to aTables[iTable].aColumns[iCol].iCol
                    Get_Attribute DF_FIELD_TYPE          of hTable iCol to aTables[iTable].aColumns[iCol].iDfType
                    Get_Attribute DF_FIELD_LENGTH        of hTable iCol to aTables[iTable].aColumns[iCol].iLength
                    Get_Attribute DF_FIELD_PRECISION     of hTable iCol to aTables[iTable].aColumns[iCol].iPrecision
                    Get_Attribute DF_FIELD_RELATED_FILE  of hTable iCol to aTables[iTable].aColumns[iCol].iRelatedTable
                    Get_Attribute DF_FIELD_RELATED_FIELD of hTable iCol to aTables[iTable].aColumns[iCol].iRelatedCol
                    Get_Attribute DF_FILE_DRIVER of hTable to sDriver
                    If (sDriver=MSSQLDRV_ID) Begin
                        Get_Attribute DF_FIELD_NATIVE_TYPE      of hTable iCol to aTables[iTable].aColumns[iCol].iNativeType
                        Get_Attribute DF_FIELD_NATIVE_TYPE_NAME of hTable iCol to aTables[iTable].aColumns[iCol].sNativeType
                    End    
                Loop
                Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iMaxIndex
                Get_Attribute DF_FILE_PRIMARY_INDEX     of hTable to iPrime
                For iIndex from 1 to iMaxIndex
                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments 
                    If (iSegments > 0) Begin
                        Move iIndex                           to aTables[iTable].aIndexes[iIndex].iIndex
                        Get_Attribute DF_INDEX_TYPE of hTable to aTables[iTable].aIndexes[iIndex].iType
                        Move (iIndex=iPrime)                  to aTables[iTable].aIndexes[iIndex].bPrime
                        If (sDriver=MSSQLDRV_ID) Begin
                            Get_Attribute DF_INDEX_SQL_PRIMARY_KEY of hTable iIndex to aTables[iTable].aIndexes[iIndex].bSqlPk
                        End    
                        For iSegment from 1 to iSegments
                            Get_Attribute DF_INDEX_SEGMENT_FIELD     of hTable iIndex iSegment to iCol
                            Get_Attribute DF_INDEX_SEGMENT_CASE      of hTable iIndex iSegment to iCase
                            Get_Attribute DF_INDEX_SEGMENT_DIRECTION of hTable iIndex iSegment to iDirection
                            Get_Attribute DF_FIELD_NAME              of hTable iCol to sCol
                            Move iCol                       to aTables[iTable].aIndexes[iIndex].aSegments[iSegment].iCol
                            Move sCol                       to aTables[iTable].aIndexes[iIndex].aSegments[iSegment].sName
                            Move (iCase=DF_CASE_IGNORED)    to aTables[iTable].aIndexes[iIndex].aSegments[iSegment].bIgnoreCase
                            Move (iDirection=DF_DESCENDING) to aTables[iTable].aIndexes[iIndex].aSegments[iSegment].bDescending
                        Loop
                    End
                Loop
            End
        Until (hTable=0)
        Set paCurrentTableList to aTables
    End_Procedure
    
    Function DoesTableExist String sName Integer ByRef iFileNo Returns Boolean
        tdDbTable[] aTables
        Integer i
        
        Move 0 to iFileNo
        Get paCurrentTableList to aTables
        For i from 0 to (SizeOfArray(aTables)-1)
            If (Uppercase(Trim(sName))=Uppercase(Trim(aTables[i].sName))) Begin
                Move aTables[i].iFileNo to iFileNo
                Function_Return True   
            End
        Loop
        Function_Return False
    End_Function 
    
    Procedure OnProcess
        Integer i 
        Boolean bUpdate
        Handle  hoTable hWnd hResult
        String  sFile
        Handle[] aTables

        Set ComponentStatus to "Analising Database"
        Send EstablishCurrentTableList
        Get phaTables to aTables
        For i from 0 to (SizeOfArray(aTables)-1)
            Move aTables[i] to hoTable
            Send OnInit of hoTable 
            Get IsUpdateRequired of hoTable to bUpdate
            If (bUpdate) Begin
                Send DoUpdate of hoTable   
            End
        Loop
        Get psStatusLogFile to sFile
        If (DoesFileExist(sFile)) Begin
            Get Window_Handle to hWnd    
            Move (ShellExecute(hWnd,"open",sFile,"","",SW_SHOWNORMAL)) to hResult       
        End         
    End_Procedure
End_Class